{"version":3,"sources":["main.ts","app.module.ts","app.component.ts","todo/todo-list.component.ts","todo/todo.service.ts","todo/todo.model.ts","todo/todo-filter.pipe.ts","todo/todo-item.component.ts"],"names":["require","platform_browser_dynamic_1","app_module_1","core_1","enableProdMode","platformBrowserDynamic","bootstrapModule","AppModule","platform_browser_1","forms_1","material_umd_1","app_component_1","todo_list_component_1","todo_service_1","todo_filter_pipe_1","todo_item_component_1","__decorate","NgModule","imports","BrowserModule","FormsModule","MaterialModule","forRoot","declarations","AppComponent","TodoListComponent","TodoFilter","TodoItemComponent","providers","TodoService","bootstrap","exports","Component","selector","template","_","todo_model_1","todoService","this","prototype","ngOnInit","todoLists","todos","getTodos","resetNewTodo","onKeyUp","e","keyCode","newTodo","name","push","Todo","deleteTodo","todo","index","indexOf","splice","shouldShowClearAll","some","done","clearAllDone","filter","t","__param","Inject","Injectable","transform","listName","Pipe","pure","EventEmitter","editMode","toggleEditMode","deleteButtonClicked","emit","Input","Output"],"mappings":"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","file":"","sourcesContent":["import 'reflect-metadata';\n// Angular wants it\nimport 'zone.js/dist/zone';\n// Styles\nimport \"./main.scss\";\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\nimport { enableProdMode } from '@angular/core';\n\nenableProdMode();\nplatformBrowserDynamic().bootstrapModule(AppModule);","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n// import { MaterialModule } from '@angular/material';  // @angular/material currently has a bug, where their package.json points to a non-existing main file.\nimport { MaterialModule } from '@angular/material/bundles/material.umd';\nimport { AppComponent } from './app.component';\nimport { TodoListComponent } from './todo/todo-list.component';\nimport { TodoService } from './todo/todo.service';\nimport { TodoFilter } from './todo/todo-filter.pipe';\nimport { TodoItemComponent } from './todo/todo-item.component';\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        FormsModule,\n        MaterialModule.forRoot()\n    ],\n    declarations: [\n        AppComponent,\n        TodoListComponent,\n        TodoFilter,\n        TodoItemComponent\n    ],\n    providers: [TodoService],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app',\n    template: `<todo-list></todo-list>`,\n})\nexport class AppComponent {}\n","import * as _ from 'lodash';\nimport { TodoService } from './todo.service';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { Todo } from './todo.model';\n\n@Component({\n    selector: 'todo-list',\n    template: require('~/todo/todo-list.component.html')\n})\nexport class TodoListComponent implements OnInit {\n    todos: Todo[];\n    newTodo: Todo;\n    todoLists: string[];\n\n    // This part is a little weird. @Inject shouldnt be necessary with TS, but it is with fuse-box\n    constructor( @Inject(TodoService) private todoService: TodoService) {}\n\n    ngOnInit() {\n        this.todoLists = ['All', 'Pending', 'Done'];\n        this.todos = this.todoService.getTodos();\n        this.resetNewTodo();\n    }\n    onKeyUp(e: any) {\n        if (e.keyCode === 13 && this.newTodo.name) {\n            this.todos.push(this.newTodo);\n            this.resetNewTodo();\n        }\n    }\n    resetNewTodo() {\n        this.newTodo = new Todo('', false);\n    }\n    deleteTodo(todo: Todo) {\n        const index = this.todos.indexOf(todo);\n        if(index !== -1) {\n            this.todos.splice(index, 1);\n        }\n    }\n    shouldShowClearAll() {\n        return _.some(this.todos, {done: true});\n    }\n    clearAllDone() {\n        this.todos = _.filter(this.todos, t => !t.done);\n    }\n}","import { Injectable } from '@angular/core';\nimport { Todo } from './todo.model';\n\n@Injectable()\nexport class TodoService {\n    getTodos() {\n        return [\n            new Todo('foo'),\n            new Todo('bar')\n        ];\n    }\n}","export class Todo {\n    constructor(public name: string, public done: boolean = false) { }\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { Todo } from './todo.model';\nimport * as _ from 'lodash';\n\n@Pipe({ name: 'todoFilter', pure: false })\nexport class TodoFilter implements PipeTransform {\n    transform(todos: Todo[], listName: string): Todo[] {  \n        if (listName === 'All') {\n            return todos;\n        } else if (listName === 'Pending') {\n            return _.filter(todos, (t: Todo) => !t.done);\n        } else if (listName === 'Done') {\n            return _.filter(todos, (t: Todo) => t.done);\n        } else {\n            return [];\n        }\n    }\n}","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Todo } from './todo.model';\n\n@Component({\n    selector: 'todo-item',\n    template: require('~/todo/todo-item.component.html')\n})\nexport class TodoItemComponent implements OnInit {\n    @Input() todo: Todo;\n    @Output() deleteTodo = new EventEmitter<Todo>();\n    editMode: boolean;\n\n    ngOnInit() {\n        this.editMode = false;\n    }\n\n    onKeyUp(e: any) {\n        if (e.keyCode === 13 && this.todo.name) {\n            this.editMode = false;\n        }\n    }\n    toggleEditMode() {\n        this.editMode = !this.editMode;\n    }\n    deleteButtonClicked() {\n        this.deleteTodo.emit(this.todo);\n    }\n}"]}